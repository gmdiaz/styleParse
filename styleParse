#!/usr/bin/env python3
# Author: Giovanna Diaz

import re
import sys
from copy import copy

class Program:
    def __init__(self,name):
        self.name = name
        self.Lclasses = []
        self.Lfuncs = []
        self.hasMain = False
        self.numComments = 0
        self.code = []
        self.lengthCode = 0

    def getFunctions(self):
        return self.Lfuncs
    
    def addFunction(self,newFunc):
        self.Lfuncs.append(newFunc)

    def addClass(self,newClass):
        self.Lclasses.append(newClass)
    
    def addLine(self,line):
        self.code.append(copy(line.strip()))

    def setMainTrue(self):
        self.hasMain = True
    
    def _getNumComments(self):
        self.numComments = len(list(filter(lambda l: "#" in l,self.code)))

    def _cleanOutComments(self):
        lines = list(filter(lambda l: not l.startswith("#"),self.code))
        nLines = []
        for line in lines:
            if "#" in line:
                line = line.split("#")[0]
            nLines.append(line)
        return nLines

    def __str__(self):
        self._getNumComments()
        cleanCode = self._cleanOutComments()
        self.lengthCode = len(" ".join(cleanCode).split())

        stats = self.name+'\n'
        stats += "#functions:\t"+str(len(self.Lfuncs))+"\n"
        stats += "#classes:\t"+str(len(self.Lclasses))+"\n"
        stats += "has main?:\t"+str(self.hasMain)+"\n"
        stats += "#comments:\t"+str(self.numComments)+"\n"
        stats += "Code length:\t"+str(self.lengthCode)+"\n"
        stats += "---------------------------------\n"

        for c in self.Lclasses:
            stats+=str(c)+"\n"
            stats += "---------------------------------\n"
        for f in self.Lfuncs:
            stats+="Function:"+str(f.getName())+"()"+"\n"
            stats+=str(f)+"\n"

        return stats

class Class:
    def __init__(self,name):
        self.name = name
        self.Lmethods = []
        self.numInitParam = 0

    def addLine(self,line):
        self.code.append(line.strip())

    def addMethod(self,newMethod):
        self.Lmethods.append(newMethod)

    def _getInitParam(self):
        for m in self.Lmethods:
            if m.getName() == "__init__":
                self.numInitParam = m.getNumParam()

    def __str__(self):
        self._getInitParam()
        stats = "Class "+str(self.name)+":\n"
        stats+= "\tMethods: "+str(len(self.Lmethods))
        stats+= "\tInit Param: "+str(self.numInitParam)+"\n"
        for m in self.Lmethods:
            stats+="Method: "+str(m.getName())+"\n"
            stats+=str(m)+"\n"
        return stats

class Function:
    def __init__(self,name,numParam):
        self.name = name
        self.docStrings = False
        self.inMain = False
        self.numParam = numParam
        self.code = []

    def getNumParam(self):
        return self.numParam
    def getName(self):
        return self.name
    def getCode(self):
        return self.code
    def setDocsTrue(self):
        self.docStrings = True
    def setMainTrue(self):
        self.inMain = True
    
    def addLine(self,line):
        self.code.append(copy(line.strip()))

    def hasDocs(self):
        return self.docStrings
    def isInMain(self):
        return self.inMain

    def __str__(self):
        stats = "\tDocs?: "+str(self.docStrings)
        stats += "\tMain?: "+str(self.inMain)
        return stats

def findMatches(regex,flag,string):
    """ Given a regex, and a string, returns
    the 'pattern.finall(string)

    keyword arguments:
    regex -- string regex
    string -- any given string
    """
    if flag:
        pattern = re.compile(regex,flag)
    else:
        pattern = re.compile(regex)
    return pattern.findall(string)

def getDefinition(line):
    defInfo = findMatches("def (.*)\((.*)\):",None,line)[0]
    name = defInfo[0]
    numParam = 0
    if len(defInfo)>1:
        numParam = len(defInfo[1].split(","))
    return name, numParam

def isMethod(line):
    if line.strip().startswith("def") and line[0]!='d':
        return True
    return False

def isFunction(line):
    if line.startswith("def"):
        return True
    return False




def main():
    Lprograms = []
    nProgram = Program("testName")

    #Analyze Functions & Classes
    nFunction = None
    with open("test.py") as infile:
        for line in infile:
            line=line.rstrip()
            nProgram.addLine(line)

            # Get data on classes
            if line.startswith("class"):
                name = findMatches("class (.*):",None,line)[0]
                nClass = Class(name)
                nProgram.addClass(nClass)
                
                nMethod = None
                while True:
                    line = next(infile).rstrip()
                    nProgram.addLine(line)

                    # Check for method
                    if isMethod(line):
                        name, numParam = getDefinition(line)
                        nMethod = Function(name,numParam)
                        nClass.addMethod(nMethod)
                        nMethod.addLine(line)
                        
                        if "'''" in next(infile):
                            nMethod.setDocsTrue()

                    # If a regular def -> your class is over
                    elif isFunction(line):
                        break

                    # Save code in func object
                    elif nMethod:
                        nMethod.addLine(line)

            # Get data on functions
            if isFunction(line):
                name,numParam = getDefinition(line)
                nFunction = Function(name,numParam)
                nFunction.addLine(line)
                nProgram.addFunction(nFunction)

                if "'''" in next(infile):
                    nFunction.setDocsTrue()
            
            if nFunction and line.startswith(" "):
                nFunction.addLine(line)

    # Are functions called in main()?
    funcs = nProgram.getFunctions()
    mainCode = None
    for f in funcs:
        if f.getName().lower() == "main":
            nProgram.setMainTrue()
            mainCode = " ".join(f.getCode())
    for f in funcs:
        if f.getName() in mainCode:
            f.setMainTrue()

    print(nProgram)


if __name__ == "__main__":
    main()
