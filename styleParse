#!/usr/bin/env python3
# Author: Giovanna Diaz

# Imports  ---------------------
import re
import sys
from copy import copy
import glob
import re
# ------------------------------

class Program:
    """
    Constructs a program object and prints out the formatted
    statistics
    """
    def __init__(self,name,author):
        self.name = name
        self.author = author
        self.Lclasses = []
        self.Lfuncs = []
        self.hasMain = False
        self.numComments = 0
        self.code = []
        self.lengthCode = 0
        self.nameInComments = False
    
    def addFunction(self,newFunc):
        self.Lfuncs.append(newFunc)

    def addClass(self,newClass):
        self.Lclasses.append(newClass)
    
    def addLine(self,line):
        self.code.append(copy(line.strip()))

    def setMainTrue(self):
        self.hasMain = True
    
    def _getNumComments(self):
        self.numComments = len(list(filter(lambda l: "#" in l,self.code)))

    def _cleanOutComments(self):
        lines = list(filter(lambda l: not l.startswith("#"),self.code))
        nLines = []
        for line in lines:
            if "#" in line:
                line = line.split("#")[0]
            nLines.append(line)
        return nLines

    def _checkAuthorInCode(self):
        nameList = self.author.split()
        lname = nameList[-1]
        if lname in "".join(self.code):
            self.nameInComments = True

    def _checkMainRequirements(self):
        mFunc = list(filter(lambda m: m.getName() == "main",self.Lfuncs))
        if len(mFunc)>0:
            mFunc = mFunc[0]
            self.hasMain = True
            mainCode = " ".join(mFunc.getCode())
            for f in self.Lfuncs:
                if f.getName() in mainCode:
                    f.setMainTrue()

    def __str__(self):
        self._getNumComments()
        self._checkAuthorInCode()
        self._checkMainRequirements()
        cleanCode = self._cleanOutComments()
        self.lengthCode = len(" ".join(cleanCode).split())

        #stats = self.name+'\n'
        stats = "Author: "+str(self.author)+"\n"
        stats += "Put name?:\t"+str(self.nameInComments)+"\n"
        stats += "has main()?:\t"+str(self.hasMain)+"\n"
        stats += "# functions:\t"+str(len(self.Lfuncs))+"\n"
        stats += "# classes:\t"+str(len(self.Lclasses))+"\n"
        stats += "# comments:\t"+str(self.numComments)+"\n"
        stats += "Code length:\t"+str(self.lengthCode)+"\n"
        stats += "---------------------------------\n"

        for c in self.Lclasses:
            stats+=str(c)+"\n"
            stats += "---------------------------------\n"
        for f in self.Lfuncs:
            stats+="Function: "+str(f.getName())+"() --> "
            stats+=str(f)+"\n"
        stats+="============================================\n\n"
        return stats

class Class:
    """
    Constructs a class object and prints out the statistics
    """
    def __init__(self,name):
        self.name = name
        self.Lmethods = []
        self.numInitParam = 0

    def addLine(self,line):
        self.code.append(line.strip())

    def addMethod(self,newMethod):
        self.Lmethods.append(newMethod)

    def _getInitParam(self):
        for m in self.Lmethods:
            if m.getName() == "__init__":
                self.numInitParam = m.getNumParam()

    def __str__(self):
        self._getInitParam()
        stats = "Class "+str(self.name)+":\n"
        stats+= "\tMethods: "+str(len(self.Lmethods))
        stats+= "\tInit Param: "+str(self.numInitParam)+"\n"
        for m in self.Lmethods:
            stats+="Method: "+str(m.getName())+"() --> "
            stats+=str(m)+"\n"
        return stats

class Function:
    """
    Constructs a funciton object and prints out the statistics
    Note: This is general! Methods are functions too!
    """
    def __init__(self,name,numParam):
        self.name = name
        self.docStrings = False
        self.inMain = False
        self.numParam = numParam
        self.code = []

    def getNumParam(self):
        return self.numParam
    def getName(self):
        return self.name
    def getCode(self):
        return self.code
    def setDocsTrue(self):
        self.docStrings = True
    def setMainTrue(self):
        self.inMain = True
    
    def addLine(self,line):
        self.code.append(copy(line.strip()))

    def hasDocs(self):
        return self.docStrings
    def isInMain(self):
        return self.inMain

    def __str__(self):
        stats = "\tDocs?: "+str(self.docStrings)
        stats += "\tMain?: "+str(self.inMain)
        return stats

def findMatches(regex,flag,string):
    """ 
    Given a regex, and a string, returns the 'pattern.finall(string)
    """
    if flag:
        pattern = re.compile(regex,flag)
    else:
        pattern = re.compile(regex)
    return pattern.findall(string)

def getDefinition(line):
    """ 
    Given a line in the code, returns the function
    name and the parameters (if there are any 
    """
    defInfo = findMatches("def (.*)\((.*)\):",None,line)[0] 
    name = defInfo[0]
    numParam = 0
    if len(defInfo)>1:
        numParam = len(defInfo[1].split(","))
    return name.strip(), numParam

def isMethod(line):
    """
    Returns True or False depending on if the line is a METHOD
    definition or not - ie. has some form of indentation before
    the 'def'
    """
    if line.strip().startswith("def") and line[0]!='d':
        return True
    return False

def isFunction(line):
    """
    Returns True or False depending on if the line is a FUNCTION
    definition or not - ie. line starts with 'def'
    """
    if line.startswith("def"):
        return True
    return False

def extractName(fname):
    """
    Given a file name, this exracts the students first and last name
    if possible. Returns 'Unknown' if the name cannot be determined
    """
    pat = re.compile('^[a-zA-z ]+[ _][a-zA-Z\-]+_')
    search = pat.search(fname)
    name = 'Unknown'
    if not search:
        print("ExtractName Error: No match found - returning \'Unknown\'")
    else:
        #print("==> Match name: ", search.group())
        # Drop last char
        name = search.group()
        name = name[0:-1]
    return name

def writeOut(Lprograms):
    """
    Give a list of program objects, this function will write out
    the statistics on each one to a file
    """
    f = open("styleOutput.txt","w")
    for program in Lprograms:
        f.write(str(program))
    f.close()

def main():
    """
    This program goes through all the files in the folder it is in
    and analyzes the code for style (classes, methods, functions, etc.)
    It outputs a file at the end with the formatted data for
    the program for each student.
    """
    files = glob.glob('*.py')
    fnumber = 0
    Lprograms = []

    for fname in files:
        if fname=="eval.py" or fname=="styleParse.py":
            continue
        elif fname[-3:] != '.py':
            #skip e.g. .sh files
            continue
        else:
            fnumber+=1
            print('File Number = ',fnumber, '\tFile Name = ', fname)
    
        # Fix the filename to replace spaces by \space, for shell exec
        ffname = fname.replace(" ", "\\ ")
    
        # Create new program object, add to list
        nProgram = Program(fname, extractName(fname))
        Lprograms.append(nProgram)

        #Analyze Functions & Classes
        nFunction = None
        with open(fname) as infile:
            for line in infile:
                line=line.rstrip()
                nProgram.addLine(line)

               # Get data on classes
                if line.startswith("class"):
                    name = findMatches("class (.*):",None,line)[0]
                    nClass = Class(name)
                    nProgram.addClass(nClass)
                
                    nMethod = None
                    while True:
                        line = next(infile).rstrip()
                        nProgram.addLine(line)
                        
                        # Check for method
                        if isMethod(line):

                            # Check for multiline method def
                            multiLineDef = ""
                            while ")" not in line:
                                multiLineDef += line
                                line = next(infile).strip()
                            
                            # if there was a multiLineDef
                            if len(multiLineDef)>0:
                                multiLineDef += line.strip()
                                print("MLD",multiLineDef)
                                name,numParam = getDefinition(multiLineDef)
                            else:
                                name,numParam = getDefinition(line)

                            # Make the method either way
                            nMethod = Function(name,numParam)
                            nClass.addMethod(nMethod)
                            nMethod.addLine(line)
                        
                            if "'''" in next(infile):
                                nMethod.setDocsTrue()

                        # If a regular def -> your class is over
                        elif len(line) > 0 and line[0] not in [' ', '\t']:
                            break

                        # Save code in func object
                        elif nMethod:
                            nMethod.addLine(line)

                # Get data on functions
                if isFunction(line):

                    # Check for multipline line def
                    multiLineDef = ""
                    while ")" not in line:
                        multiLineDef += line
                        line = next(infile).strip()
 
                    # if there was a multiLineDef
                    if len(multiLineDef)>0:
                        print("MLD",multiLineDef)
                        name,numParam = getDefinition(multiLineDef)
                    else:
                        name,numParam = getDefinition(line)
    
                    # make the function either way
                    nFunction = Function(name,numParam)
                    nFunction.addLine(line)
                    nProgram.addFunction(nFunction)

                    if "'''" in next(infile):
                        nFunction.setDocsTrue()

                if nFunction and line.startswith(" "):
                    nFunction.addLine(line)

        #print(nProgram)
        writeOut(Lprograms)

if __name__ == "__main__":
    main()
